{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Shaderlab",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#unity"
		},
		{
			"include": "#types"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#properties"
		},
		{
			"include": "#macosOrPragma"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#variable"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.shaderlab",
					"match": "[#]?\\b(if|while|for|return|continue|inline|in|inout|out|elif|endif|else|define|undef|defined|ifndef|ifdef|static|const|LINE|line|pragma|include)\\b"
				},
				{
					"name": "keyword.other.shaderlab",
					"match": "\\b(?i:Shader|SubShader|Tags|Fallback|Properties|Pass|CGPROGRAM|ENDCG|CGINCLUDE|HLSLPROGRAM|ENDHLSL|HLSLINCLUDE|GLSLPROGRAM|ENDGLSL|GLSLINCLUDE)\\b"
				}
			]
		},
		"properties": {
			"patterns": [
				{
					"name": "storage.type.structure.shaderlab",
					"match": "(?<=,)(\\s*?)\\b(?i:Range|Float|Int|Color|Vector|2D|3D|Cube|Any)\\b"
				}
			]
		},
		"types": {
			"patterns": 
			[
				{
					"name": "keyword.other.shaderlab",
					"match": "\\b(?i:uniform|struct|sampler|sampler2D|sampler3D|Texture2D|Texture3D|SamplerState|samplerCUBE|string|triangle|triangleadj|vector|((float|int|uint|bool|half|fixed|double)(\\d*?|\\d*?x\\d*?)))\\b"
				},
				{
					"name": "keyword.other.LWRP.hlsl.shaderlab",
					"match": "\\b(?i:((real|void)(\\d*?|\\d*?x\\d*?)))\\b"
				},
				{
					"name": "meta.type.shaderlab",
					"match": "(?xi: (?<=struct)\\s*?\\b(\\w+)\\b | (?<!\\#)\\b(\\w+)\\b(?=\\s+\\b) | (?<=\\()\\b(\\w+)\\b(?=\\)\\s*?\\b) | \\b(\\w+)\\b\\s*?<\\s*?\\b(\\w+)\\b\\s*?> | <\\s*?\\b(\\w+)\\b\\s*?> )",
					"captures":
					{
						"1": { "name": "entity.name.type.structures.shaderlab" },
						"2": { "name": "entity.name.type.structures.shaderlab" },
						"3": { "name": "entity.name.type.cast.shaderlab" },
						"4": { "name": "entity.name.type.generic.shaderlab" },
						"5": { "name": "entity.name.type.structures.shaderlab" }
					}
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.shaderlab",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.shaderlab",
					"match": "\\\\."
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-dash.shaderlab",
					"begin": "//",
					"end": "$"
				},
				{
					"name": "comment.block.shaderlab",
					"begin": "/\\*",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.shaderlab"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.shaderlab"
						}
					}
				}
			]
		},
		"macosOrPragma": {
			"patterns": [
				{
					"name": "keyword.other.shaderlab",
					"begin": "#(\\s*?)(?i:pragma|include)",
					"end": "$"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.shaderlab",
					"match": "\\b([0-9]+\\.?[0-9]*[Ff]?)\\b"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"match": "\\b([A-Za-z0-9_]*)\\b[ \\t]*\\(",
					"name": "meta.function.shaderlab",
					"captures": {
						"1": {
							"name": "entity.name.function.shaderlab"
						}
					}
				}
			]
		},
		"variable": {
			"patterns": 
			[
				{
					"name": "entity.name.variable.subObj.shaderlab",
					"match": "(?<=\\.)(\\w+)(?=(\\b|.))"
				}
			]
		},
		"unity": {
			"patterns": [
				{
					"name": "support.function.macos.shaderlab",
					"match": "\\b(CBUFFER_START|CBUFFER_END|GLOBAL_CBUFFER_START|GLOBAL_CBUFFER_END|UNITY_VERTEX_INPUT_INSTANCE_ID|UNITY_VERTEX_OUTPUT_STEREO|V2F_SHADOW_CASTER_NOPOS|TANGENT_SPACE_ROTATION)\\b"
				},
				{
					"name": "support.variable.others.hlsl.shaderlab",
					"match": "\\b(xxxxxxxxxxxxxxxxxxxxxxxxxxxx)\\b"
				},
				{
					"name": "support.variable.transformations.shaderlab",
					"match": "\\b(UNITY_MATRIX_MVP|UNITY_MATRIX_MV|UNITY_MATRIX_V|UNITY_MATRIX_P|UNITY_MATRIX_VP|UNITY_MATRIX_T_MV|UNITY_MATRIX_IT_MV|UNITY_MATRIX_M|UNITY_MATRIX_I_M|UNITY_MATRIX_I_V|_Object2World|_World2Object|unity_ObjectToWorld|unity_WorldToObject)\\b"
				},
				{
					"name": "support.variable.camera.shaderlab",
					"match": "\\b(_WorldSpaceCameraPos|_ProjectionParams|_ScreenParams|_ZBufferParams|unity_OrthoParams|unity_CameraProjection|unity_CameraInvProjection|unity_CameraWorldClipPlanes)\\b"
				},
				{
					"name": "support.variable.time.shaderlab",
					"match": "\\b(_Time|_SinTime|_CosTime|unity_DeltaTime)\\b"
				},
				{
					"name": "support.variable.lighting.shaderlab",
					"match": "\\b(_LightColor0|_WorldSpaceLightPos0|_LightMatrix0|unity_4LightPosX0|unity_4LightPosY0|unity_4LightPosZ0|unity_4LightAtten0|unity_LightColor|_LightColor|unity_LightPosition|unity_LightAtten|unity_SpotDirection)\\b"
				},
				{
					"name": "support.variable.fog.shaderlab",
					"match": "\\b(unity_AmbientSky|unity_AmbientEquator|unity_AmbientGround|UNITY_LIGHTMODEL_AMBIENT|unity_FogColor|unity_FogParams)\\b"
				},
				{
					"name": "support.variable.various.shaderlab",
					"match": "\\b(unity_LODFade)\\b"
				},
				{
					"name": "support.variable.XR.shaderlab",
					"match": "\\b(unity_StereoScaleOffset)\\b"
				},
				{
					"name": "support.variable.preprocessor.targetplatform.shaderlab",
					"match": "\\b(SHADER_API_D3D9|SHADER_API_D3D11|SHADER_API_GLCORE|SHADER_API_OPENGL|SHADER_API_GLES|SHADER_API_GLES3|SHADER_API_METAL|SHADER_API_D3D11_9X|SHADER_API_PSSL|SHADER_API_XBOXONE|SHADER_API_PSP2|SHADER_API_WIIU|SHADER_API_MOBILE|SHADER_API_GLSL)\\b"
				},
				{
					"name": "support.variable.preprocessor.targetmodel.shaderlab",
					"match": "\\b(SHADER_TARGET)\\b"
				},
				{
					"name": "support.variable.preprocessor.unityversion.shaderlab",
					"match": "\\b(UNITY_VERSION)\\b"
				},
				{
					"name": "support.variable.preprocessor.platformdifference.shaderlab",
					"match": "\\b(UNITY_BRANCH|UNITY_FLATTEN|UNITY_NO_SCREENSPACE_SHADOWS|UNITY_NO_LINEAR_COLORSPACE|UNITY_NO_RGBM|UNITY_NO_DXT5nm|UNITY_FRAMEBUFFER_FETCH_AVAILABLE|UNITY_USE_RGBA_FOR_POINT_SHADOWS|UNITY_ATTEN_CHANNEL|UNITY_HALF_TEXEL_OFFSET|UNITY_UV_STARTS_AT_TOP|UNITY_MIGHT_NOT_HAVE_DEPTH_Texture|UNITY_NEAR_CLIP_VALUE|UNITY_VPOS_TYPE|UNITY_CAN_COMPILE_TESSELLATION|UNITY_COMPILER_HLSL|UNITY_COMPILER_HLSL2GLSL|UNITY_COMPILER_CG|UNITY_REVERSED_Z)\\b"
				},
				{
					"name": "support.variable.preprocessor.XR.shaderlab",
					"match": "\\b(USING_STEREO_MATRICES|UNITY_SINGLE_PASS_STEREO|UNITY_STEREO_INSTANCING_ENABLED|UNITY_STEREO_MULTIVIEW_ENABLED)\\b"
				},
				{
					"name": "support.variable.preprocessor.texture2D.shaderlab",
					"match": "\\b(UNITY_PASS_FORWARDBASE|UNITY_PASS_FORWARDADD|UNITY_PASS_DEFERRED|UNITY_PASS_SHADOWCASTER|UNITY_PASS_PREPASSBASE|UNITY_PASS_PREPASSFINAL)\\b"
				},
				{
					"name": "support.variable.attribuate.shaderlab",
					"match": "(?<=\\[)(None|HideInInspector|Toggle|ToggleOff|PerRendererData|NoScaleOffset|Normal|HDR|Gamma|NonModifiableTextureData)(?=\\])"
				},
				{
					"name": "storage.type.structure.shaderlab",
					"match": "\\b(?i:Shader|Properties|SubShader|Pass|Category)\\b"
				},
				{
					"name": "keyword.other.shaderlab",
					"match": "\\b(Name|Tags|Fallback|CustomEditor|Cull|ZWrite|ZTest|Offset|Blend|BlendOp|ColorMask|AlphaToMask|LOD|Lighting|Stencil|Ref|ReadMask|WriteMask|Comp|CompBack|CompFront|Fail|ZFail|UsePass|GrabPass|Dependency|Material|Fog|Mode|Density|SeparateSpecular|SetTexture|Combine|ConstantColor|Matrix|AlphaTest|ColorMaterial|BindChannels|Bind)\\b"
				},
				{	
					"name": "keyword.other.pragma.shaderlab",
					"match": "(?<=#pragma)\\s+(vertex|geometry|fragment|shader_feature|multi_compile|prefer_hlslcc|skip_variants|exclude_renderers|target)\\b"
				},
				{
					"name": "support.constant.property-value.shaderlab",
					"match": "\\b(?i:Back|Front|On|Off|AmbientAndDiffuse)\\b"
				},
				{
					"name": "support.constant.property-value.comparisonfunction.shaderlab",
					"match": "\\b(?i:Less|Greater|LEqual|GEqual|Equal|NotEqual|Always|Never)\\b"
				},
				{
					"name": "support.constant.property-value.stenciloperation.shaderlab",
					"match": "\\b(?i:Keep|Zero|Replace|IncrSat|DecrSat|Invert|IncrWrap|DecrWrap)\\b"
				},
				{
					"name": "support.constant.property-value.texturecombiners.shaderlab",
					"match": "\\b(?i:Previous|Primary|Texture|Constant|Lerp|Double|Quad)\\b"
				},
				{
					"name": "support.constant.property-value.fog.shaderlab",
					"match": "\\b(?i:Global|Linear|Exp2|Exp)\\b"
				},
				{
					"name": "support.constant.property-value.bindchannels.shaderlab",
					"match": "(?<=:)(\\s*?)\\b(?i:Vertex|Normal|Vector|Tangent|TexCoord(\\d?)|SV_POSITION|POSITION|SV_TARGET|SV_CULLDISTANCE|SV_TessFactor|SV_InsideTessFactor|Color(\\d?))\\b"
				},
				{
					"name": "support.constant.property-value.blendoperations.shaderlab",
					"match": "\\b(?i:Add|Sub|RevSub|Min|Max|LogicalClear|LogicalSet|LogicalCopyInverted|LogicalCopy|LogicalNoop|LogicalInvert|LogicalAnd|LogicalNand|LogicalOr|LogicalNor|LogicalXor|LogicalEquiv|LogicalAndReverse|LogicalAndInverted|LogicalOrReverse|LogicalOrInverted)\\b"
				},
				{
					"name": "support.constant.property-value.blendfactors.shaderlab",
					"match": "\\b(?i:One|Zero|SrcColor|SrcAlpha|DstColor|DstAlpha|OneMinusSrcColor|OneMinusSrcAlpha|OneMinusDstColor|OneMinusDstAlpha)\\b"
				}
			]
		}
	},
	"scopeName": "source.shader"
}
